using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Blog.Utils
{
    public static class BlogUtils
    {
        /**
         * Updates html generated by wysiwyg editor to ensure that content
         * is mobile friendly and fullscreen button is enabled
         */
        public static string FormatPostContent(string content)
        {
            var result = content;
            if (string.IsNullOrEmpty(result)) return result;

            const string startOfVideoTags =
                "<div class=\"embed-responsive embed-responsive-16by9\"><iframe allowfullscreen=\"true\"";
            const string endOfVideoTags = "></iframe></div>";
            result = result.Replace("<iframe ", startOfVideoTags).Replace("></iframe>", endOfVideoTags);

            return result;
        }

        /**
        * Formats user input slug into a valid slug that can be used in a url
        */
        public static string CreateSlug(string slug)
        {
            slug = slug.ToLowerInvariant().Replace(" ", "-");
            slug = RemoveDiacritics(slug);
            slug = RemoveReservedUrlCharacters(slug);
            slug = RemoveRepeatedHyphens(slug);

            return slug.ToLowerInvariant();
        }

        /**
         * Used to remove unwanted characters from slug
         */
        private static string RemoveReservedUrlCharacters(string text)
        {
            var reservedCharacters = new List<string>
            {
                "!", "#", "$", "&", "'", "(", ")", "*", ",", "/", ":", ";", "=", "?", "@", "[", "]", "\"", "%", ".",
                "<", ">", "\\", "^", "_", "'", "{", "}", "|", "~", "`", "+", "£", "¬"
            };

            foreach (var chr in reservedCharacters)
            {
                text = text.Replace(chr, "");
            }

            return text;
        }

        /**
         * Used to remove unwanted diacritics from slug
         */
        private static string RemoveDiacritics(string text)
        {
            var normalizedString = text.Normalize(NormalizationForm.FormD);
            var stringBuilder = new StringBuilder();

            foreach (var c in normalizedString)
            {
                var unicodeCategory = CharUnicodeInfo.GetUnicodeCategory(c);
                if (unicodeCategory != UnicodeCategory.NonSpacingMark)
                {
                    stringBuilder.Append(c);
                }
            }

            return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
        }

        /**
         * Removes repeated hyphens from text
         */
        private static string RemoveRepeatedHyphens(string text)
        {
            var initialTrim = Regex.Replace(text, "-+", "-");
            var finalTrim = initialTrim.Trim('-');
            return finalTrim;
        }
    }
}