@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@model AccountManagerViewModel
@{
    ViewData["Title"] = "Account Manager";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<section class="s-content">
    <div class="row s-content__header">
        <h1>@ViewData["Title"]</h1>
        <hr/>
    </div>

    <div class="row">
        <form asp-action="Index" asp-controller="AccountManager"
              asp-antiforgery="true" method="post" id="searchForm">
            <div class="form-field">
                <label for="inputSearchUserName">Find by username:</label>

                @Html.TextBoxFor(m => m.AccountSearch.UserName, new
                {
                    @class = "full-width", @id = "inputSearchUserName",
                    @placeholder = "Search by username"
                })
            </div>

            <div class="form-field">
                <label for="filterByRole">Filter by role:</label>

                @Html.DropDownListFor(m => m.AccountSearch.Role,
                    Model.AvailableIdentityRoles.Select(item => new SelectListItem
                    {Value = item.Name.ToString(), Text = item.Name.ToString(),}),
                    "All Roles", new {@class = "full-width", @id = "filterByRole"})

            </div>
            <button type="submit" class="btn-cust">Search</button>
        </form>
    </div>

    @if (Model.Accounts.Any())
    {
        <div class="row">
            <div class="table-responsive">
                <table class="table">
                    <tr>
                        <th>
                            Username
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Accounts.First().Email)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Accounts.First().Name)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Accounts.First().DisplayName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Accounts.First().Role)
                        </th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>

                    @foreach (var user in Model.Accounts)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => user.UserName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => user.Email)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => user.Name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => user.DisplayName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => user.Role)
                            </td>
                            <td>
                                <button type="button" class="btn-cust btn-cust--small btn-cust--pill"
                                        onclick="location.href = '@Url.Action("Details", "AccountManager",
                                                                      new {userName = user.UserName})'"
                                        style="margin-right: 5px">
                                    View
                                </button>
                            </td>
                            <td>
                                @if ((await AuthorizationService.AuthorizeAsync(User, "CanEditUsers")).Succeeded)
                                {
                                    <button type="button" class="btn-cust btn-cust--small btn-cust--pill"
                                            onclick="location.href = '@Url.Action("Edit", "AccountManager",
                                                                          new {userName = user.UserName})'"
                                            style="margin-right: 5px">
                                        Edit
                                    </button>
                                }
                            </td>
                            <td>
                                @if ((await AuthorizationService.AuthorizeAsync(User, "CanDeleteUsers")).Succeeded)
                                {
                                    <button type="button" id="btnDelete-@user.UserName" style="margin-right: 5px"
                                            class="btn-cust btn-cust--small btn-cust--pill 
                                            btn-cust--danger btnDeleteUser">
                                        Delete
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
            @if ((await AuthorizationService.AuthorizeAsync(User, "CanDeleteUsers")).Succeeded)
            {
                <form asp-controller="AccountManager" asp-action="Delete"
                      method="post" id="postDeleteUser" asp-antiforgery="true">
                </form>
            }
        </div>
    }
    else
    {
        <div class="row text-center">
            <h2>No accounts found.</h2>
            <button type="button" onclick="location.href = '@Url.Action("Index", "AccountManager")'"
                    class="btn-cust">
                View all users
            </button>
        </div>
    }
</section>

@section Scripts
{
    @if ((await AuthorizationService.AuthorizeAsync(User, "CanDeleteUsers")).Succeeded)
    {
        <script>
            $(document).ready(function() {
                $(".btnDeleteUser").click(function() {
                    var btnId = this.id;
                    var username = btnId.replace('btnDelete-', '');

                    swal({
                            title: "Are you sure?",
                            text: "This user will be deleted permanently!",
                            icon: "warning",
                            buttons: true,
                            dangerMode: true
                        })
                        .then((willDelete) => {
                            if (willDelete) {

                                var input = $("<input>")
                                    .attr("type", "hidden")
                                    .attr("name", "userName").val(username);
                                $('#postDeleteUser').append(input);
                                $('#postDeleteUser').submit();
                            }
                        });
                });
            });
        </script>
    }
    @if (ViewData["AccManagerMessage"] != null)
    {
        <script>
            $(document).ready(function() {
                swal("@ViewData["AccManagerMessage"]", { icon: "info" });
            });
        </script>
    }
}